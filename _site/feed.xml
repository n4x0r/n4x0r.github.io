<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ignacio Sanmillan's Blog</title>
    <description>Exploring the worlds of Computer Science, Reverse Engineering and Security. Enjoying Braking things.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 20 Dec 2016 14:48:23 -0800</pubDate>
    <lastBuildDate>Tue, 20 Dec 2016 14:48:23 -0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>SharifCTF7 - Nanomites</title>
        <description>&lt;p&gt;Nanomites was a Reverse engineering challenge of 300 point in SharifCTF7. The specification of this problem was the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Analyze the given file. Find the C&amp;amp;C IP address and the data sent to it &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;plain text.
Flag &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SharifCTF&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;md5&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;strcat&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;IP, Data&lt;span class=&quot;o&quot;&gt;))}&lt;/span&gt;_
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For the ones that coud not attend the competition, You can download the challenge from &lt;a href=&quot;../files/Nanomites.exe&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After running the command &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; against the binary, I got the following output:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Nanomites.exe: PE32 executable (GUI) Intel 80386, for MS Windows&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;My next steps after knowing this was to analyze it with IDA in order to find  out any evidence of the binary connecting to a remote host.&lt;/p&gt;

&lt;p&gt;Once the file is in IDA, we can see that the binary is some what obfuscated.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../files/1.png&quot; alt=&quot;relative call&quot; /&gt;
&lt;img src=&quot;../files/2.png&quot; alt=&quot;int3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking for strings XREFs, I found myself with the IP address of the C&amp;amp;C:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../files/3.png&quot; alt=&quot;C&amp;amp;C IP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After knowing the IP address of the C&amp;amp;C, I then opened wireshark to see if I could intercept any communications. I indeed intercepted a stream. This stream looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../files/4.png&quot; alt=&quot;Message intercpeted&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clearly that message that our host was sending to &lt;code class=&quot;highlighter-rouge&quot;&gt;155.64.16.51&lt;/code&gt; is encrypted.&lt;/p&gt;

&lt;p&gt;After knowing this information, then I proceeded to look where the application sent the encrypted buffer.
Looking at the imported functions. We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; is at address &lt;code class=&quot;highlighter-rouge&quot;&gt;0x40151d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../files/5.png&quot; alt=&quot;send XREF&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x35&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x2e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x34&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x46&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x46&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;E otteniamo come output &lt;code class=&quot;highlighter-rouge&quot;&gt;This_Is_The_Secret_Data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sappiamo quindi i due valori necessari per calcolare la flag. Dopo averli concatenati, ne calcoliamo l’&lt;code class=&quot;highlighter-rouge&quot;&gt;md5&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s1&quot;&gt;'155.64.16.51This_Is_The_Secret_Data'&lt;/span&gt; | md5
fb0e90f2ec7a701783e70e674fa94848
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La flag è quindi &lt;code class=&quot;highlighter-rouge&quot;&gt;SharifCTF{fb0e90f2ec7a701783e70e674fa94848}&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Dec 2016 20:30:00 -0800</pubDate>
        <link>http://localhost:4000/ctf/2016/12/19/SharifCTF2016-Nanomites.html</link>
        <guid isPermaLink="true">http://localhost:4000/ctf/2016/12/19/SharifCTF2016-Nanomites.html</guid>
        
        <category>reverse</category>
        
        <category>SharifCTF7</category>
        
        
        <category>CTF</category>
        
      </item>
    
  </channel>
</rss>
